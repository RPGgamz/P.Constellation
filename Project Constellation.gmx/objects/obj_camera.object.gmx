<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>turnrate = 2
vp = instance_create(x, y-50, obj_vanishing_point)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !(instance_exists(obj_player)) {
    exit;
}

x += (obj_player.x - x)*.10;
y += (obj_player.y - y)*.10;

vp.x = x+cos(degtorad(view_angle-90))*400
vp.y = y+sin(degtorad(view_angle-90))*400

//Rotation
var xaxis = obj_player.xaxis;
var yaxis = obj_player.yaxis;
if (point_distance(0, 0, xaxis, yaxis) &gt;= .25){
    var target = 90-point_direction(0, 0, -xaxis, -yaxis)+view_angle;
    angle_diff = abs(angle_difference(90-point_direction(0, 0, xaxis, yaxis)+view_angle, view_angle))
    if (angle_diff &gt; 90) angle_diff += 180 - 2*angle_diff;
    turnrate = (angle_diff)*0.003;
    //snap the angle if it's close enough to the joystick
    if (15 &gt; angle_diff) {
        angle = point_direction(0, 0, xaxis, yaxis);
    } else {
    //else: make angle approach the joystick
        if (abs(view_angle - target) &gt; 180) {
            view_angle -= turnrate*sign(view_angle - target);
        } else {
            view_angle += turnrate*sign(view_angle - target);
        }
        if (view_angle &gt; 360) view_angle -= 360;
        if (view_angle &lt; 0) view_angle +=360;
    }
    with(obj_prop) {image_angle = -view_angle;}
    with(obj_lifeform) {image_angle = -view_angle;}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
